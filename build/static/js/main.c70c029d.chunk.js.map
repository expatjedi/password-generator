{"version":3,"sources":["components/img/copy.svg","App.js","serviceWorker.js","index.js"],"names":["App","lowercaseState","setState","lowercaseCheckBox","state","uppercaseState","uppercaseCheckBox","numbersState","numbersCheckBox","symbolsState","symbolsCheckBox","e","document","querySelector","innerText","target","value","generatedPassword","preventDefault","this","lowercase","checked","uppercase","numbers","symbols","feedbackElement","style","display","firstChild","setTimeout","alphabets","repeat","toLowerCase","split","sort","Math","random","join","slice","length","numberList","symbolList","passfield","feedbackEle","select","setSelectionRange","execCommand","top","className","method","action","onSubmit","generatePassword","type","name","ref","input","readOnly","title","onClick","copyPassword","src","copy","alt","onChange","passwordLength","defaultValue","min","max","step","defaultChecked","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c70c029d.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/copy.58d16222.svg\";","import React from 'react';\r\nimport copy from './components/img/copy.svg';\r\nimport './components/styles/style.css';\r\n\r\nclass App extends React.Component {\r\n\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      lowercaseCheckBox: true,\r\n      uppercaseCheckBox: true,\r\n      numbersCheckBox: true,\r\n      symbolsCheckBox: true\r\n    }\r\n  }\r\n\r\n  // Display password length value to the user.\r\n  passwordLength(e) {\r\n    let lengthDisplay = document.querySelector(\".length-display\");\r\n    lengthDisplay.innerText = e.target.value;\r\n    return;\r\n  }\r\n\r\n  alphabets() {\r\n    return \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r\n  }\r\n\r\n  numberList() {\r\n    return \"0123456789\";\r\n  }\r\n\r\n  symbolList() {\r\n    return \"~`!@#$%^&*()_-+={[}]|\\\\:;\\\"'<,>.?/\";\r\n  }\r\n\r\n  generatePassword(e) {\r\n\r\n    let lowerletters;\r\n    let upperletters;\r\n    let numbers;\r\n    let symbols;\r\n    let generatedPassword  = \"\";\r\n\r\n    e.preventDefault();\r\n\r\n    // Return an error to the user if no option is selected.\r\n    if(!this.lowercase.checked && !this.uppercase.checked && !this.numbers.checked && !this.symbols.checked) {\r\n\r\n      let feedbackElement = document.querySelector(\".error-wrapper\");\r\n\r\n      feedbackElement.style.display = \"block\"\r\n      feedbackElement.firstChild.innerText = \"Select at least one option\";\r\n\r\n      setTimeout(() => {\r\n        feedbackElement.style.display = \"\"\r\n      }, 3000)\r\n\r\n      return;\r\n    }\r\n    \r\n    // Return an error to the user if only symbol option is selected.\r\n    if(!this.lowercase.checked && !this.uppercase.checked && !this.numbers.checked && this.symbols.checked) {\r\n\r\n      let feedbackElement = document.querySelector(\".error-wrapper\");\r\n\r\n      feedbackElement.style.display = \"block\"\r\n      feedbackElement.firstChild.innerText = \"You can not select only the symbol option\";\r\n\r\n      setTimeout(() => {\r\n        feedbackElement.style.display = \"\"\r\n      }, 3000)\r\n\r\n      return;\r\n    }\r\n\r\n    // Add lowercase letters to generatedPassword if the option is checked.\r\n    if(this.lowercase.checked) {\r\n      //shuffle letters and reduce the length to the password length the user choosed\r\n      lowerletters = this.alphabets().repeat(4).toLowerCase().split('').sort(function(){return 0.5-Math.random()}).join('').slice(0, this.length.value);\r\n      generatedPassword += lowerletters;\r\n    }\r\n\r\n    // Add uppercase letters to generatedPassword if the option is checked.\r\n    if(this.uppercase.checked) {\r\n      // shuffle letters and reduce the length to the password length the user selected.\r\n      upperletters = this.alphabets().repeat(4).split('').sort(function(){return 0.5-Math.random()}).join('').slice(0, this.length.value);\r\n      generatedPassword += upperletters;\r\n    }\r\n    // Add numbers to generatedPassword if the option is checked.\r\n    if(this.numbers.checked) {\r\n      //shuffle numbers and reduce the length to the password length the user selected.\r\n      numbers = this.numberList().repeat(10).split('').sort(function(){return 0.5-Math.random()}).join('').slice(0, this.length.value);\r\n      generatedPassword += numbers;\r\n    }\r\n    // Add symbols letters to generatedPassword if the option is checked.\r\n    if(this.symbols.checked) {\r\n      //shuffle symbols and reduce the length to the password length the user selected.\r\n      symbols = this.symbolList().repeat(4).split('').sort(function(){return 0.5-Math.random()}).join('').slice(0, this.length.value);\r\n      generatedPassword += symbols;\r\n    }\r\n    \r\n    // Shuffle final password and reduce the length to the password length the user selected.\r\n    generatedPassword = generatedPassword.split('').sort(function(){return 0.5-Math.random()}).join('').split('').sort(function(){return 0.5-Math.random()}).join('').slice(0, this.length.value);\r\n    \r\n    // Set value of the text field to the generated password.\r\n    this.passfield.value = generatedPassword;\r\n\r\n    return;\r\n\r\n  }\r\n\r\n  //function to copy password from the textfield\r\n  copyPassword() {\r\n\r\n    let passfield = document.querySelector(\".passfield\")\r\n    let feedbackEle = document.querySelector(\".copy-feedback\");\r\n\r\n    /* Select the text field */    \r\n    passfield.select();\r\n    passfield.setSelectionRange(0, 99999); /*For mobile devices*/\r\n\r\n    /* Copy the text inside the text field */\r\n    document.execCommand(\"copy\");\r\n\r\n    // Only display feedback when passfield contains a value.\r\n    if (passfield.value) {\r\n\r\n      feedbackEle.style.top = \"22px\";\r\n      setTimeout(() => { feedbackEle.style.top = \"\"; }, 2000)\r\n\r\n    }\r\n\r\n    return;\r\n\r\n  }\r\n  \r\n  // show custom checkbox if its corresponding input checkbox is checked\r\n  lowercaseState = () => { return this.setState({ lowercaseCheckBox: !this.state.lowercaseCheckBox, }); }\r\n  uppercaseState = () => { return this.setState({ uppercaseCheckBox: !this.state.uppercaseCheckBox, }); }\r\n  numbersState = () => { return this.setState({ numbersCheckBox: !this.state.numbersCheckBox, }); }\r\n  symbolsState = () => { return this.setState({ symbolsCheckBox: !this.state.symbolsCheckBox, }); }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <div className=\"container\">\r\n          <h1>Password Generator</h1>\r\n          <p>Use this tool to instantly create secure, random passwords.</p>\r\n          <div className=\"form-wrapper\">\r\n            <div className=\"form-inner-wrapper\">\r\n              <div className=\"copy-feedback\">\r\n                <p>** Copied</p>\r\n              </div>\r\n              <form method=\"post\" action=\"\" onSubmit={(e) => this.generatePassword(e) } >\r\n                <div className=\"form-top-section\">\r\n                  <input type=\"text\" name=\"\" className=\"passfield\" ref={(input) => this.passfield = input} readOnly/>\r\n                  <div className=\"copy-wrapper\" title=\"Copy Password\" onClick={(e) => this.copyPassword() }><img src={ copy } alt=\"Copy Icon\" /></div>\r\n                </div>\r\n                <div className=\"form-footer-section\">\r\n                  <div className=\"form-footer-main-column\">\r\n                    <label>Password Length</label>\r\n                      <input type=\"range\" name=\"\" onChange={(e) => this.passwordLength(e) } defaultValue=\"16\" ref={(input) => this.length = input } min=\"6\" max=\"100\" step=\"1\"/>\r\n                      <div className=\"length-display\">16</div>                    \r\n                  </div>\r\n                  <div className=\"form-footer-main-column\">\r\n                    <div className=\"form-footer-column\">\r\n                      <label className={(this.state.lowercaseCheckBox) ? \"selected\":\"\"}>\r\n                        <input type=\"checkbox\" name=\"\" onChange={this.lowercaseState} defaultChecked={this.state.lowercaseCheckBox} ref={(input) => this.lowercase = input } />\r\n                        <span>Lowercase</span>\r\n                        <span className=\"check\"></span>\r\n                      </label>\r\n                      <label className={(this.state.uppercaseCheckBox) ? \"selected\":\"\"}>\r\n                        <input type=\"checkbox\" name=\"\" onChange={this.uppercaseState} defaultChecked={this.state.uppercaseCheckBox} ref={(input) => this.uppercase = input } />\r\n                        <span>Uppercase</span>\r\n                        <span className=\"check\"></span>\r\n                      </label>\r\n                    </div>\r\n                    <div className=\"form-footer-column\">\r\n                      <label className={(this.state.numbersCheckBox) ? \"selected\":\"\"}>\r\n                        <input type=\"checkbox\" name=\"\" onChange={this.numbersState} defaultChecked={this.state.numbersCheckBox} ref={(input) => this.numbers = input } />\r\n                        <span>Numbers</span>\r\n                        <span className=\"check\"></span>\r\n                      </label>\r\n                      <label className={(this.state.symbolsCheckBox) ? \"selected\":\"\"}>\r\n                        <input type=\"checkbox\" name=\"\" onChange={this.symbolsState} defaultChecked={this.state.symbolsCheckBox} ref={(input) => this.symbols = input } />\r\n                        <span>Symbols</span>\r\n                        <span className=\"check\"></span>\r\n                      </label>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <div className=\"form-button\">\r\n                  <input type=\"submit\" className=\"generate-button\" value=\"Generate Password\" />\r\n                </div>\r\n              </form>\r\n              <div className=\"error-wrapper\">\r\n                <p></p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './components/styles/index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}